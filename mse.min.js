
/*
set.coffee
Copyright (C) 2015 ender xu <xuender@gmail.com>

Distributed under terms of the MIT license.
 */
var Set,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Set = (function() {
  function Set(set) {
    this.set = set != null ? set : [];
    this["in"] = bind(this["in"], this);
    this.add = bind(this.add, this);
  }

  Set.prototype.add = function(arg) {
    var i, j, len, results, t;
    if (arg instanceof Array) {
      results = [];
      for (i = j = 0, len = arg.length; j < len; i = ++j) {
        t = arg[i];
        if (this.set[i]) {
          results.push(this.set[i] = this.set[i] | t);
        } else {
          results.push(this.set[i] = t);
        }
      }
      return results;
    } else {
      return this.add(Set.toArray(arg));
    }
  };

  Set.prototype["in"] = function(array) {
    var i, j, len, s, t;
    for (i = j = 0, len = array.length; j < len; i = ++j) {
      s = array[i];
      if (s) {
        t = s & this.set[i];
        if (t !== s) {
          return false;
        }
      }
    }
    return true;
  };

  Set.toArray = function(num) {
    var array, x, y;
    array = [];
    x = Math.floor(num / 32);
    y = 1 << (num % 32);
    if (array[x]) {
      array[x] = array[x] | y;
    } else {
      array[x] = y;
    }
    return array;
  };

  Set.equal = function(x, y) {
    var i, j, len, t;
    for (i = j = 0, len = x.length; j < len; i = ++j) {
      t = x[i];
      if (t && y[i]) {
        if (y[i] !== t) {
          return false;
        }
      } else if (t || y[i]) {
        return false;
      }
    }
    return true;
  };

  Set.intersection = function(x, y) {
    var i, j, len, ret, t;
    ret = [];
    for (i = j = 0, len = x.length; j < len; i = ++j) {
      t = x[i];
      if (y[i]) {
        ret[i] = y[i] & t;
      }
    }
    return ret;
  };

  return Set;

})();


/*
mini.coffee
Copyright (C) 2015 ender xu <xuender@gmail.com>

Distributed under terms of the MIT license.
 */
var MSE, Mini, search,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Mini = (function() {
  function Mini(config) {
    this.search = bind(this.search, this);
    var i, j, len, np, p, ref;
    this.dict = config.dict;
    this.pages = config.pages;
    ref = this.pages;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      p = ref[i];
      if (p.set instanceof Array) {
        np = new Set();
        np.set = p.set;
        this.pages[i].set = np;
      }
    }
  }

  Mini.prototype.search = function(kw, cb) {
    var d, i, j, k, l, len, len1, len2, len3, len4, m, n, nw, p, ref, ref1, ref2, ref3, ref4, ret, s, searchSet, w;
    searchSet = new Set();
    w = /\w+/;
    nw = /\W+/;
    ref = kw.split(w);
    for (j = 0, len = ref.length; j < len; j++) {
      s = ref[j];
      ref1 = this.dict;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        d = ref1[i];
        if (nw.test(d)) {
          if (s.indexOf(d) >= 0) {
            searchSet.add(i);
            break;
          }
        }
      }
    }
    ref2 = kw.split(nw);
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      s = ref2[l];
      if (s && w.test(s)) {
        ref3 = this.dict;
        for (i = m = 0, len3 = ref3.length; m < len3; i = ++m) {
          d = ref3[i];
          if (s.toLowerCase() === d) {
            searchSet.add(i);
            break;
          }
        }
      }
    }
    ret = [];
    if (searchSet.set.length === 0) {
      cb(ret);
      return;
    }
    ref4 = this.pages;
    for (n = 0, len4 = ref4.length; n < len4; n++) {
      p = ref4[n];
      if (p.set["in"](searchSet.set)) {
        ret.push(p);
      }
    }
    return cb(ret);
  };

  return Mini;

})();

MSE = null;

search = function(kw, cb) {
  if (MSE) {
    return MSE.search(kw, cb);
  } else {
    return $.getJSON('/mse.json', function(config) {
      MSE = new Mini(config);
      return MSE.search(kw, cb);
    });
  }
};
